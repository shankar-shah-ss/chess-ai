#!/usr/bin/env python3
"""
Test what happens when switching game modes during gameplay
"""
import sys
import threading
import time
sys.path.append('src')

def test_mode_switching():
    """Test switching from Human vs Engine to Engine vs Engine"""
    print("üîÑ Mode Switching Test: Human vs Engine ‚Üí Engine vs Engine")
    print("=" * 70)
    
    from game import Game
    from board import Board
    
    # Create game instance
    game = Game()
    board = game.board
    
    def show_game_state(label):
        threads = threading.enumerate()
        print(f"\nüìä {label}:")
        print(f"  ‚Ä¢ Game Mode: {game.game_mode}")
        print(f"  ‚Ä¢ Engine White: {game.engine_white}")
        print(f"  ‚Ä¢ Engine Black: {game.engine_black}")
        print(f"  ‚Ä¢ Next Player: {game.next_player}")
        print(f"  ‚Ä¢ Engine Thread: {game.engine_thread}")
        print(f"  ‚Ä¢ Active Threads: {len(threads)}")
        for i, thread in enumerate(threads, 1):
            if 'Engine' in thread.name or 'Worker' in thread.name:
                print(f"    {i}. {thread.name} - Alive: {thread.is_alive()}")
    
    # Start in Human vs Engine mode
    print("üéÆ Starting in Human vs Engine mode...")
    game.set_game_mode(1)  # Human vs Engine
    show_game_state("Initial State (Human vs Engine)")
    
    # Simulate that it's black's turn (engine should move)
    game.next_player = 'black'
    print(f"\n‚ö´ Setting turn to Black (engine should be active)...")
    
    # Schedule an engine move
    print("ü§ñ Scheduling engine move...")
    game.schedule_engine_move()
    time.sleep(0.1)  # Give thread time to start
    show_game_state("After Engine Move Scheduled")
    
    # Now switch to Engine vs Engine mode while engine is thinking
    print(f"\nüîÑ SWITCHING TO ENGINE VS ENGINE MODE (while engine is active)...")
    game.set_game_mode(2)  # Engine vs Engine
    show_game_state("After Mode Switch (Engine vs Engine)")
    
    # Test what happens when it becomes white's turn
    game.next_player = 'white'
    print(f"\n‚ö™ Setting turn to White (should now be engine controlled)...")
    
    # Try to schedule another engine move
    print("ü§ñ Scheduling white engine move...")
    try:
        game.schedule_engine_move()
        time.sleep(0.1)
        show_game_state("After White Engine Move Scheduled")
    except Exception as e:
        print(f"‚ùå Error scheduling white engine move: {e}")
    
    # Wait for threads to complete
    time.sleep(0.5)
    show_game_state("Final State (after threads complete)")

def test_rapid_mode_switching():
    """Test rapid mode switching"""
    print(f"\n‚ö° Rapid Mode Switching Test:")
    print("=" * 40)
    
    from game import Game
    game = Game()
    
    modes = [
        (0, "Human vs Human"),
        (1, "Human vs Engine"), 
        (2, "Engine vs Engine"),
        (1, "Human vs Engine"),
        (0, "Human vs Human"),
        (2, "Engine vs Engine")
    ]
    
    for i, (mode, name) in enumerate(modes):
        print(f"  {i+1}. Switching to {name}...")
        game.set_game_mode(mode)
        time.sleep(0.05)  # Very short delay
        threads = threading.enumerate()
        print(f"     Threads: {len(threads)}, Engine Thread: {game.engine_thread}")
    
    time.sleep(0.3)  # Wait for cleanup
    final_threads = threading.enumerate()
    print(f"  Final threads: {len(final_threads)}")

def test_edge_cases():
    """Test edge cases that might cause crashes"""
    print(f"\nüß™ Edge Case Testing:")
    print("=" * 30)
    
    from game import Game
    
    try:
        game = Game()
        
        # Test 1: Switch modes rapidly while scheduling moves
        print("‚Ä¢ Test 1: Rapid mode switching with move scheduling")
        game.set_game_mode(1)
        game.next_player = 'black'
        game.schedule_engine_move()
        game.set_game_mode(2)  # Switch while engine is thinking
        game.set_game_mode(0)  # Switch again
        game.set_game_mode(2)  # And again
        time.sleep(0.2)
        print("  ‚úÖ No crash")
        
        # Test 2: Switch modes with different players
        print("‚Ä¢ Test 2: Mode switching with different active players")
        game.next_player = 'white'
        game.set_game_mode(2)
        game.schedule_engine_move()
        game.next_player = 'black'
        game.set_game_mode(1)
        time.sleep(0.2)
        print("  ‚úÖ No crash")
        
        # Test 3: Multiple rapid switches
        print("‚Ä¢ Test 3: Multiple rapid switches")
        for _ in range(10):
            game.set_game_mode(1)
            game.set_game_mode(2)
            game.set_game_mode(0)
        time.sleep(0.2)
        print("  ‚úÖ No crash")
        
    except Exception as e:
        print(f"  ‚ùå Crash detected: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def main():
    """Main test function"""
    try:
        test_mode_switching()
        test_rapid_mode_switching()
        success = test_edge_cases()
        
        print(f"\nüéØ Test Results:")
        print("=" * 30)
        if success:
            print("‚úÖ Mode switching appears to be SAFE")
            print("‚úÖ No crashes detected during testing")
            print("‚úÖ Thread management handles mode switches")
            print("‚úÖ Engine states transition properly")
        else:
            print("‚ùå Potential crash scenarios detected")
        
        print(f"\nüìã What happens when switching modes:")
        print("‚Ä¢ Engine boolean flags are updated immediately")
        print("‚Ä¢ Existing engine threads continue running")
        print("‚Ä¢ New engine threads are scheduled based on new mode")
        print("‚Ä¢ Thread cleanup happens automatically")
        print("‚Ä¢ No explicit cleanup of old threads during switch")
        
        print(f"\n‚ö†Ô∏è Potential Issues:")
        print("‚Ä¢ Old engine threads may complete moves after mode switch")
        print("‚Ä¢ Brief period where multiple engines might be active")
        print("‚Ä¢ No immediate cancellation of in-progress calculations")
        
        print(f"\n‚úÖ Overall Assessment: SHOULD NOT CRASH")
        print("The game is designed to handle mode switches gracefully")
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()